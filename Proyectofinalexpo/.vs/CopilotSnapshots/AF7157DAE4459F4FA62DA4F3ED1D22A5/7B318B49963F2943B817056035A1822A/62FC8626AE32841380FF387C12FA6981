using Application.DTOs;
using Domain.Interfaces;
using Dominio.Entities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly IUsuarioRepositorio _usuarioRepositorio;
        private readonly IRolRepositorio _rolRepositorio;
        private readonly IPacienteRepositorio _pacienteRepositorio;
        private readonly IConfiguration _config;

        public AuthController(IUsuarioRepositorio usuarioRepositorio, IRolRepositorio rolRepositorio, IPacienteRepositorio pacienteRepositorio, IConfiguration config)
        {
            _usuarioRepositorio = usuarioRepositorio;
            _rolRepositorio = rolRepositorio;
            _pacienteRepositorio = pacienteRepositorio;
            _config = config;
        }

        // =====================
        // ✅ REGISTRO DE USUARIO (contraseña en texto plano)
        // =====================
        [HttpPost]
        public async Task<IActionResult> CrearUsuario([FromBody] UsuariosDTO dto)
        {
            if (dto == null)
                return BadRequest("Datos del usuario inválidos.");

            // Crear entidad manualmente, no usar ModelState directo en el mapping
            var usuario = new Usuarios
            {
                Id = Guid.NewGuid(),
                NombreUsuario = dto.NombreUsuario,
                Email = dto.Correo,
                PasswordHash = dto.Contrasena, // aquí se genera el hash
                Telefono = dto.Telefono,
                RolId = dto.IdRol
            };

            await _usuarioRepositorio.CrearAsync(usuario);

            return Ok(new { mensaje = "Usuario creado correctamente" });
        }


        // DTO mínimo para registro
        public class RegisterRequest
        {
            public string NombreUsuario { get; set; }
            public string Contrasena { get; set; }
        }

        // =====================
        // ✅ LOGIN (comparación de texto plano)
        // =====================
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginRequest login)
        {
            Console.WriteLine("===== LOGIN INICIADO =====");
            Console.WriteLine($"Usuario recibido: {login?.NombreUsuario}");

            if (string.IsNullOrEmpty(login?.NombreUsuario) || string.IsNullOrEmpty(login?.Contrasena))
                return BadRequest("Nombre de usuario y contraseña son requeridos.");

            var usuario = await _usuarioRepositorio.ObtenerPorNombreUsuarioAsync(login.NombreUsuario);
            if (usuario == null)
            {
                Console.WriteLine("❌ Usuario no encontrado.");
                return Unauthorized("Usuario no encontrado.");
            }

            // COMPARACIÓN SIMPLE DE TEXTO PLANO
            if (usuario.PasswordHash != login.Contrasena)
            {
                Console.WriteLine("❌ Contraseña incorrecta.");
                return Unauthorized("Contraseña incorrecta.");
            }

            var token = GenerarToken(usuario);
            Console.WriteLine("✅ Login exitoso, token generado correctamente.");
            Roles? rol = null;
            if (usuario.RolId.HasValue)
            {
                rol = await _rolRepositorio.ObtenerPorIdAsync(usuario.RolId.Value);
            }
            var nombreRol = rol?.Nombre ?? "Usuario";
            return Ok(new { token, nombreRol });
        }

        // DTO mínimo solo para login
        public class LoginRequest
        {
            public string NombreUsuario { get; set; }
            public string Contrasena { get; set; }
        }

        // =====================
        // ✅ GENERAR TOKEN JWT
        // =====================
        private string GenerarToken(Usuarios usuario)
        {
            var claims = new[]
            {
                new Claim(ClaimTypes.Name, usuario.NombreUsuario),
                new Claim(ClaimTypes.Role, usuario.Rol?.Nombre ?? "Usuario")
            };

            var keyString = _config["Jwt:Key"];
            if (string.IsNullOrEmpty(keyString))
                throw new Exception("Clave secreta JWT no configurada.");

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(keyString));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: _config["Jwt:Issuer"],
                audience: _config["Jwt:Audience"],
                claims: claims,
                expires: DateTime.Now.AddHours(2),
                signingCredentials: creds
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}
